
・「lazy」を付加して遅延評価

・関数の部分適用・・・引数の一部だけ値を渡して別関数に保持。残りの引数には別関数実行時に値を渡せる。

・関数のカリー化・・・複数の引数を別々に定義（def show(i: Int)(j: Int)）。関数をチェーンとして呼び出せるようにする。

・for/if/case は式なので値を返せる。値を返してその結果を変数に保持できる。

・メソッドは、
　・可変長引数（型の後ろに「*」付加）定義可能
　・デフォルト引数定義可能

・暗黙の型変換や暗黙の引数（implicitを付加）が定義できる。
　・暗黙の型変換・・・例えば、IntからStringへの変換関数を定義しておくと、変数から変数へ代入するだけでその関数が自動的に使われる。
　・暗黙の引数・・・呼び出しとは別に事前にimplicitを付けて宣言しておくだけで、呼び出し時には定義せずとも自動的に使われる。（デフォルト引数とニアリー）

・